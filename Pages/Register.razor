@page "/register"
@using EventEase.Models
@using EventEase.Services
@using Microsoft.Extensions.Logging
@inject UserService UserService
@inject SessionService SessionService
@inject NavigationManager NavigationManager
@inject ILogger<Register> _logger

<PageTitle>Register - EventEase</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-4">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Create Account</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="@(() => errorMessage = string.Empty)"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @successMessage
                            <button type="button" class="btn-close" @onclick="@(() => successMessage = string.Empty)"></button>
                        </div>
                    }

                    <EditForm Model="@registrationModel" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="registrationModel.Username" />
                            <ValidationMessage For="@(() => registrationModel.Username)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email address</label>
                            <InputText id="email" class="form-control" @bind-Value="registrationModel.Email" />
                            <ValidationMessage For="@(() => registrationModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group">
                                <InputText type="@(showPassword ? "text" : "password")" 
                                         id="password" 
                                         class="form-control" 
                                         @bind-Value="registrationModel.Password" />
                                <button class="btn btn-outline-secondary" 
                                        type="button" 
                                        @onclick="TogglePasswordVisibility">
                                    <i class="bi bi-@(showPassword ? "eye-slash" : "eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => registrationModel.Password)" />
                            <div class="form-text">
                                Password must contain at least 8 characters, including uppercase, lowercase, 
                                number and special character.
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <InputText type="password" 
                                     id="confirmPassword" 
                                     class="form-control" 
                                     @bind-Value="confirmPassword" />
                            @if (!string.IsNullOrEmpty(passwordMatchError))
                            {
                                <div class="text-danger">@passwordMatchError</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label for="fullName" class="form-label">Full Name</label>
                            <InputText id="fullName" class="form-control" @bind-Value="registrationModel.FullName" />
                            <ValidationMessage For="@(() => registrationModel.FullName)" />
                        </div>

                        <div class="mb-3">
                            <label for="phoneNumber" class="form-label">Phone Number (optional)</label>
                            <InputText id="phoneNumber" class="form-control" @bind-Value="registrationModel.PhoneNumber" />
                            <ValidationMessage For="@(() => registrationModel.PhoneNumber)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-2">Processing...</span>
                                }
                                else
                                {
                                    <span>Register</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <div class="mt-3 text-center">
                        Already have an account? <a href="/login">Log in</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private User registrationModel = new();
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string passwordMatchError = string.Empty;
    private bool showPassword = false;
    private bool isProcessing = false;

    protected override void OnInitialized()
    {
        // Redirect if already authenticated
        if (SessionService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/events");
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleRegistration()
    {
        try
        {
            if (registrationModel.Password != confirmPassword)
            {
                passwordMatchError = "Passwords do not match";
                return;
            }

            passwordMatchError = string.Empty;
            isProcessing = true;
            errorMessage = string.Empty;

            var result = await UserService.RegisterUserAsync(registrationModel);

            if (result.success)
            {
                // Start user session after successful registration
                await SessionService.StartSessionAsync(registrationModel);
                successMessage = result.message;
                _logger.LogInformation($"User {registrationModel.Username} registered successfully");
                await Task.Delay(1000); // Show success message briefly
                NavigationManager.NavigateTo("/events");
            }
            else
            {
                errorMessage = result.message;
                _logger.LogWarning($"Registration failed: {result.message}");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Registration error occurred");
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isProcessing = false;
        }
    }
}